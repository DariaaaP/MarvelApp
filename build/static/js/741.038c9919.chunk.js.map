{"version":3,"file":"static/js/741.038c9919.chunk.js","mappings":"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","sources":["components/animation/AnimatedPage.js","components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/charSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import { motion } from \"framer-motion\";\n\nconst animations = {\n    initial: { opacity: 0, scale: 0.95 },\n    animate: { opacity: 1, scale: 1 },\n    exit: { opacity: 0, scale: 0.95 },\n};\n\nconst AnimationPage = ({ children }) => {\n    return (\n        <motion.div\n            variants={animations}\n            initial=\"initial\"\n            animate=\"animate\"\n            exit=\"exit\"\n            transition={{ duration: 0.5 }}\n        >\n            {children}\n        </motion.div>\n    );\n};\n\nexport default AnimationPage;\n","import img from \"./error.gif\";\n\nconst ErrorMessage = () => {\n    return (\n        <img\n            style={{\n                display: \"block\",\n                width: \"250px\",\n                height: \"250px\",\n                objectFit: \"contain\",\n                margin: \"0 auto\",\n            }}\n            src={img}\n            alt=\"Error\"\n        />\n    );\n};\n\nexport default ErrorMessage;\n","import { useState, useEffect } from \"react\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport setContent from \"../../utils/setContent\";\n\nimport \"./randomChar.scss\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\n\nconst RandomChar = () => {\n    const [char, setChar] = useState(null);\n\n    const { getCharacter, clearError, process, setProcess } =\n        useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    };\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000); //рандомное id\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess(\"confirmed\"));\n    };\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!\n                    <br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">Or choose another one</p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img\n                    src={mjolnir}\n                    alt=\"mjolnir\"\n                    className=\"randomchar__decoration\"\n                />\n            </div>\n        </div>\n    );\n};\n\n//рендерящий компонент\nconst View = ({ data }) => {\n    const { name, description, thumbnail, homepage, wiki } = data;\n\n    let imgStyle = { objectFit: \"cover\" };\n    if (\n        thumbnail ===\n        \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n    ) {\n        imgStyle = { objectFit: \"unset\" };\n    }\n    return (\n        <div className=\"randomchar__block\">\n            <img\n                src={thumbnail}\n                alt=\"Random character\"\n                className=\"randomchar__img\"\n                style={imgStyle}\n            />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">{description}</p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef, useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Spinner from \"../spinner/Spinner\";\n\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport \"./charList.scss\";\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case \"waiting\":\n            return <Spinner />;\n\n        case \"loading\":\n            return newItemLoading ? <Component /> : <Spinner />;\n\n        case \"confirmed\":\n            return <Component />;\n\n        case \"error\":\n            return <ErrorMessage />;\n\n        default:\n            throw new Error(\"Unexpected process state\");\n    }\n};\n\nconst CharList = (props) => {\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const { getAllCharacters, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        //метод загрузки данных c сервера + Пагинация\n        initial ? setNewItemLoading(false) : setNewItemLoading(true); //не влияет на первоначальную загрузку, но необходим для дальнейшей работы\n        getAllCharacters(offset)\n            .then(onCharListLoad)\n            .then(() => setProcess(\"confirmed\"));\n    };\n\n    const onCharListLoad = async (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList((charList) => [...charList, ...newCharList]);\n        setNewItemLoading(false);\n        setOffset((offset) => offset + 9);\n        setCharEnded((charEnded) => ended);\n    };\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach((item) =>\n            item.classList.remove(\"char__item_selected\")\n        );\n        itemRefs.current[id].classList.add(\"char__item_selected\");\n        itemRefs.current[id].focus();\n    };\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = { objectFit: \"cover\" };\n\n            if (\n                item.thumbnail ===\n                    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" ||\n                item.thumbnail ===\n                    \"http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif\"\n            ) {\n                imgStyle = { objectFit: \"unset\" };\n            }\n\n            return (\n                <li\n                    ref={(el) => (itemRefs.current[i] = el)}\n                    className=\"char__item\"\n                    tabIndex={0}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        e.preventDefault();\n                        if (e.key === \" \" || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}\n                >\n                    <img\n                        src={item.thumbnail}\n                        alt={item.name}\n                        style={imgStyle}\n                    />\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            );\n        });\n        return <ul className=\"char__grid\">{items}</ul>;\n    }\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [process]);\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ display: charEnded ? \"none\" : \"block\" }}\n                onClick={() => onRequest(offset)}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    );\n};\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport setContent from \"../../utils/setContent\";\n\nimport \"./charInfo.scss\";\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null);\n\n    const { getCharacter, clearError, process, setProcess } =\n        useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.charId]);\n\n    function updateChar() {\n        const { charId } = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess(\"confirmed\"));\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    };\n\n    return <div className=\"char__info\">{setContent(process, View, char)}</div>;\n};\n\nconst View = ({ data }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = data;\n\n    let imgStyle = { objectFit: \"cover\" };\n    if (\n        thumbnail ===\n        \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n    ) {\n        imgStyle = { objectFit: \"unset\" };\n    }\n\n    const items =\n        comics.length === 0\n            ? \"There is no comics with this character\"\n            : comics.slice(0, 10).map((item) => {\n                  const comicId = item.resourceURI.slice(43);\n                  return (\n                      <Link\n                          to={`/comics/${comicId}`}\n                          key={comicId}\n                          className=\"char__comics-item\"\n                      >\n                          {item.name}\n                      </Link>\n                  );\n              });\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">{description}</div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">{items}</ul>\n        </>\n    );\n};\n\nCharInfo.propTypes = {\n    charId: PropTypes.number,\n};\n\nexport default CharInfo;\n","import { useState } from \"react\";\nimport {\n    Formik,\n    Form,\n    Field,\n    ErrorMessage as FormikErrorMessage,\n} from \"formik\";\nimport * as Yup from \"yup\";\nimport { Link } from \"react-router-dom\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport \"./charSearchForm.scss\";\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n    const { getCharacterByName, clearError, process, setProcess } =\n        useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    };\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n            .then(onCharLoaded)\n            .then(() => setProcess(\"confirmed\"));\n    };\n\n    const errorMessage =\n        process === \"error\" ? (\n            <div className=\"char__search-critical-error\">\n                <ErrorMessage />\n            </div>\n        ) : null;\n\n    const results = !char ? null : char.length > 0 ? (\n        <div className=\"char__search-wrapper\">\n            <div className=\"char__search-success\">\n                There is! Visit {char[0].name} page?\n            </div>\n            <Link\n                to={`/characters/${char[0].id}`}\n                className=\"button button__secondary\"\n            >\n                <div className=\"inner\">To page</div>\n            </Link>\n        </div>\n    ) : (\n        <div className=\"char__search-error\">\n            The character was not found. Check the name and try again\n        </div>\n    );\n\n    return (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues={{\n                    charName: \"\",\n                }}\n                validationSchema={Yup.object({\n                    charName: Yup.string().required(\"This field is required\"),\n                })}\n                onSubmit={({ charName }) => {\n                    updateChar(charName);\n                }}\n            >\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">\n                        Or find a character by name:\n                    </label>\n                    <div className=\"char__search-wrapper\">\n                        <Field\n                            id=\"charName\"\n                            name=\"charName\"\n                            type=\"text\"\n                            placeholder=\"Enter name\"\n                        />\n                        <button\n                            type=\"submit\"\n                            className=\"button button__main\"\n                            disabled={process === \"loading\"}\n                        >\n                            <div className=\"inner\">find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage\n                        component=\"div\"\n                        className=\"char__search-error\"\n                        name=\"charName\"\n                    />\n                </Form>\n            </Formik>\n            {results}\n            {errorMessage}\n        </div>\n    );\n};\n\nexport default CharSearchForm;\n","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false,\n    };\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n        this.setState({\n            error: true,\n        });\n    }\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage />;\n        }\n\n        return this.props.children;\n    }\n}\nexport default ErrorBoundary;\n","import { useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nimport AnimationPage from \"../animation/AnimatedPage\";\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport CharSearchForm from \"../charSearchForm/charSearchForm\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\nimport decoration from \"../../resources/img/vision.png\";\nimport \"./main.scss\";\n\nconst MainPage = () => {\n    const [selectedChar, setChar] = useState(null);\n    const onCharSelected = (id) => {\n        setChar(id);\n    };\n\n    return (\n        <AnimationPage>\n            <Helmet>\n                <meta name=\"description\" content=\"Marvel information portal\" />\n                <title>Marvel information portal</title>\n            </Helmet>\n            <ErrorBoundary>\n                <RandomChar />\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected} />\n                </ErrorBoundary>\n                <div className=\"char__informations\">\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar} />\n                    </ErrorBoundary>\n                    <ErrorBoundary>\n                        <CharSearchForm />\n                    </ErrorBoundary>\n                </div>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n        </AnimationPage>\n    );\n};\n\nexport default MainPage;\n","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState(\"waiting\");\n\n    const request = useCallback(\n        async (\n            url,\n            method = \"GET\",\n            body = null,\n            headers = { \"Content-Type\": \"application/json\" }\n        ) => {\n            setProcess(\"loading\");\n            try {\n                const response = await fetch(url, { method, headers, body });\n\n                if (!response.ok) {\n                    throw new Error(\n                        `Could not fetch ${url}, status: ${response.status}`\n                    );\n                }\n\n                const data = await response.json();\n\n                return data;\n            } catch (e) {\n                setProcess(\"error\");\n                throw e;\n            }\n        },\n        []\n    );\n\n    const clearError = useCallback(() => {\n        setProcess(\"loading\");\n    }, []);\n\n    return { request, clearError, process, setProcess };\n};\n","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const { request, clearError, process, setProcess } = useHttp();\n\n    const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n    const _apiKey = \"apikey=0481e59bf467b69f70671a30361d50b4\";\n    const _baseOffsetChar = 210;\n\n    const getAllCharacters = async (offset = _baseOffsetChar) => {\n        const res = await request(\n            `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\n        );\n        return res.data.results.map(_transformCharacter);\n    };\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?&${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    };\n\n    const getCharacterByName = async (name) => {\n        const res = await request(\n            `${_apiBase}characters?name=${name}&${_apiKey}`\n        );\n        return res.data.results.map(_transformCharacter);\n    };\n\n    const getAllComics = async (offset = 0) => {\n        const res = await request(\n            `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n        );\n        return res.data.results.map(_transformComics);\n    };\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?&${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    };\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description\n                ? `${char.description.slice(0, 210)}...`\n                : `There is no description for this character`,\n            thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items,\n        };\n    };\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || \"There is no description\",\n            pageCount: comics.pageCount\n                ? `${comics.pageCount} p.`\n                : \"No information about the number of pages\",\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n            language: comics.textObjects[0]?.language || \"en-us\",\n            price: comics.prices[0].price\n                ? `${comics.prices[0].price}$`\n                : \"not available\",\n        };\n    };\n\n    return {\n        clearError,\n        process,\n        setProcess,\n        getAllCharacters,\n        getCharacter,\n        getCharacterByName,\n        getAllComics,\n        getComic,\n    };\n};\n\nexport default useMarvelService;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from \"../components/spinner/Spinner\";\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\nimport Skeleton from \"../components/skeleton/Skeleton\";\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n        case \"waiting\":\n            return <Skeleton />;\n\n        case \"loading\":\n            return <Spinner />;\n\n        case \"confirmed\":\n            return <Component data={data} />;\n\n        case \"error\":\n            return <ErrorMessage />;\n\n        default:\n            throw new Error(\"Unexpected process state\");\n    }\n};\n\nexport default setContent;\n"],"names":["animations","initial","opacity","scale","animate","exit","_ref","children","_jsx","motion","div","variants","transition","duration","ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","View","data","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","href","RandomChar","char","setChar","useState","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","onCharListLoad","async","ended","newCharList","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","Error","arr","items","map","i","ref","el","tabIndex","onCharSelected","onKeyPress","e","preventDefault","key","renderItems","disabled","comics","slice","comicId","resourceURI","Link","to","concat","_Fragment","charId","CharSearchForm","getCharacterByName","errorMessage","results","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","component","ErrorBoundary","constructor","arguments","state","error","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage","selectedChar","AnimationPage","Helmet","content","CharList","CharInfo","decoration","request","useHttp","useCallback","url","method","undefined","body","headers","response","fetch","ok","status","json","_apiBase","_apiKey","_transformCharacter","path","extension","urls","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","res","getAllComics","getComic","Skeleton"],"sourceRoot":""}