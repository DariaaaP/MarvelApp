{"version":3,"file":"static/js/682.c35a9f6c.chunk.js","mappings":"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","sources":["components/animation/AnimatedPage.js","components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import { motion } from \"framer-motion\";\n\nconst animations = {\n    initial: { opacity: 0, scale: 0.95 },\n    animate: { opacity: 1, scale: 1 },\n    exit: { opacity: 0, scale: 0.95 },\n};\n\nconst AnimationPage = ({ children }) => {\n    return (\n        <motion.div\n            variants={animations}\n            initial=\"initial\"\n            animate=\"animate\"\n            exit=\"exit\"\n            transition={{ duration: 0.5 }}\n        >\n            {children}\n        </motion.div>\n    );\n};\n\nexport default AnimationPage;\n","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from \"./error.gif\";\n\nconst ErrorMessage = () => {\n    return (\n        <img\n            style={{\n                display: \"block\",\n                width: \"250px\",\n                height: \"250px\",\n                objectFit: \"contain\",\n                margin: \"0 auto\",\n            }}\n            src={img}\n            alt=\"Error\"\n        />\n    );\n};\n\nexport default ErrorMessage;\n","import { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Spinner from \"../spinner/Spinner\";\n\nimport \"./comicsList.scss\";\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case \"waiting\":\n            return <Spinner />;\n\n        case \"loading\":\n            return newItemLoading ? <Component /> : <Spinner />;\n\n        case \"confirmed\":\n            return <Component />;\n\n        case \"error\":\n            return <ErrorMessage />;\n\n        default:\n            throw new Error(\"Unexpected process state\");\n    }\n};\n\nconst ComicsList = () => {\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(359);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const { getAllComics, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        //метод загрузки данных c сервера + Пагинация\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoad)\n            .then(() => setProcess(\"confirmed\"));\n    };\n\n    const onComicsListLoad = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n\n        setComicsList((comicsList) => [...comicsList, ...newComicsList]);\n        setNewItemLoading(false);\n        setOffset((offset) => offset + 8);\n        setComicsEnded(ended);\n    };\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            return (\n                <li className=\"comics__item\" tabIndex={0} key={i}>\n                    <Link to={`/comics/${item.id}`}>\n                        <img\n                            src={item.thumbnail}\n                            alt={item.title}\n                            className=\"comics__item-img\"\n                        />\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n            );\n        });\n        return <ul className=\"comics__grid\">{items}</ul>;\n    }\n\n    return (\n        <div className=\"comics__list\">\n            {setContent(process, () => renderItems(comicsList), newItemLoading)}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ display: comicsEnded ? \"none\" : \"block\" }}\n                onClick={() => onRequest(offset)}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    );\n};\n\nexport default ComicsList;\n","import { Helmet } from \"react-helmet\";\nimport AnimationPage from \"../animation/AnimatedPage\";\nimport AppBanner from \"../appBanner/AppBanner\";\nimport ComicsList from \"../comicsList/ComicsList\";\n\nconst ComicsPage = () => {\n    return (\n        <AnimationPage>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Page with list of our comics\"\n                />\n                <title>Comics Page</title>\n            </Helmet>\n            <AppBanner />\n            <ComicsList />\n        </AnimationPage>\n    );\n};\n\nexport default ComicsPage;\n","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState(\"waiting\");\n\n    const request = useCallback(\n        async (\n            url,\n            method = \"GET\",\n            body = null,\n            headers = { \"Content-Type\": \"application/json\" }\n        ) => {\n            setProcess(\"loading\");\n            try {\n                const response = await fetch(url, { method, headers, body });\n\n                if (!response.ok) {\n                    throw new Error(\n                        `Could not fetch ${url}, status: ${response.status}`\n                    );\n                }\n\n                const data = await response.json();\n\n                return data;\n            } catch (e) {\n                setProcess(\"error\");\n                throw e;\n            }\n        },\n        []\n    );\n\n    const clearError = useCallback(() => {\n        setProcess(\"loading\");\n    }, []);\n\n    return { request, clearError, process, setProcess };\n};\n","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const { request, clearError, process, setProcess } = useHttp();\n\n    const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n    const _apiKey = \"apikey=0481e59bf467b69f70671a30361d50b4\";\n    const _baseOffsetChar = 210;\n\n    const getAllCharacters = async (offset = _baseOffsetChar) => {\n        const res = await request(\n            `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\n        );\n        return res.data.results.map(_transformCharacter);\n    };\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?&${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    };\n\n    const getCharacterByName = async (name) => {\n        const res = await request(\n            `${_apiBase}characters?name=${name}&${_apiKey}`\n        );\n        return res.data.results.map(_transformCharacter);\n    };\n\n    const getAllComics = async (offset = 0) => {\n        const res = await request(\n            `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n        );\n        return res.data.results.map(_transformComics);\n    };\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?&${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    };\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description\n                ? `${char.description.slice(0, 210)}...`\n                : `There is no description for this character`,\n            thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items,\n        };\n    };\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || \"There is no description\",\n            pageCount: comics.pageCount\n                ? `${comics.pageCount} p.`\n                : \"No information about the number of pages\",\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n            language: comics.textObjects[0]?.language || \"en-us\",\n            price: comics.prices[0].price\n                ? `${comics.prices[0].price}$`\n                : \"not available\",\n        };\n    };\n\n    return {\n        clearError,\n        process,\n        setProcess,\n        getAllCharacters,\n        getCharacter,\n        getCharacterByName,\n        getAllComics,\n        getComic,\n    };\n};\n\nexport default useMarvelService;\n"],"names":["animations","initial","opacity","scale","animate","exit","_ref","children","_jsx","motion","div","variants","transition","duration","AppBanner","_jsxs","className","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","setContent","process","Component","newItemLoading","Spinner","Error","ComicsList","comicsList","setComicsList","useState","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","getAllComics","setProcess","useMarvelService","useEffect","onRequest","then","onComicsListLoad","newComicsList","ended","length","arr","items","map","item","i","tabIndex","Link","to","concat","id","thumbnail","title","price","renderItems","disabled","onClick","ComicsPage","AnimationPage","Helmet","name","content","request","clearError","useHttp","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","status","json","e","_apiBase","_apiKey","_transformCharacter","char","description","slice","path","extension","homepage","urls","wiki","comics","_transformComics","_comics$textObjects$","pageCount","language","textObjects","prices","getAllCharacters","data","results","getCharacter","res","getCharacterByName","getComic"],"sourceRoot":""}