{"version":3,"file":"static/js/156.22a83e01.chunk.js","mappings":"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","sources":["components/animation/AnimatedPage.js","components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/SinglePage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import { motion } from \"framer-motion\";\n\nconst animations = {\n    initial: { opacity: 0, scale: 0.95 },\n    animate: { opacity: 1, scale: 1 },\n    exit: { opacity: 0, scale: 0.95 },\n};\n\nconst AnimationPage = ({ children }) => {\n    return (\n        <motion.div\n            variants={animations}\n            initial=\"initial\"\n            animate=\"animate\"\n            exit=\"exit\"\n            transition={{ duration: 0.5 }}\n        >\n            {children}\n        </motion.div>\n    );\n};\n\nexport default AnimationPage;\n","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from \"./error.gif\";\n\nconst ErrorMessage = () => {\n    return (\n        <img\n            style={{\n                display: \"block\",\n                width: \"250px\",\n                height: \"250px\",\n                objectFit: \"contain\",\n                margin: \"0 auto\",\n            }}\n            src={img}\n            alt=\"Error\"\n        />\n    );\n};\n\nexport default ErrorMessage;\n","import AnimationPage from \"../animation/AnimatedPage\";\nimport AppBanner from \"../appBanner/AppBanner\";\nimport { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport setContent from \"../../utils/setContent\";\n\nconst SinglePage = ({ Component, dataType }) => {\n    const { id } = useParams();\n    const [data, setData] = useState(null);\n    const { getComic, getCharacter, clearError, process, setProcess } =\n        useMarvelService();\n\n    useEffect(() => {\n        updateData();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [id]);\n\n    const updateData = () => {\n        clearError();\n\n        // eslint-disable-next-line default-case\n        switch (dataType) {\n            case \"comic\":\n                getComic(id)\n                    .then(onDataLoaded)\n                    .then(() => setProcess(\"confirmed\"));\n                break;\n            case \"character\":\n                getCharacter(id)\n                    .then(onDataLoaded)\n                    .then(() => setProcess(\"confirmed\"));\n        }\n    };\n\n    const onDataLoaded = (data) => {\n        setData(data);\n    };\n\n    return (\n        <AnimationPage>\n            <AppBanner />\n            {setContent(process, Component, data)}\n        </AnimationPage>\n    );\n};\n\nexport default SinglePage;\n","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState(\"waiting\");\n\n    const request = useCallback(\n        async (\n            url,\n            method = \"GET\",\n            body = null,\n            headers = { \"Content-Type\": \"application/json\" }\n        ) => {\n            setProcess(\"loading\");\n            try {\n                const response = await fetch(url, { method, headers, body });\n\n                if (!response.ok) {\n                    throw new Error(\n                        `Could not fetch ${url}, status: ${response.status}`\n                    );\n                }\n\n                const data = await response.json();\n\n                return data;\n            } catch (e) {\n                setProcess(\"error\");\n                throw e;\n            }\n        },\n        []\n    );\n\n    const clearError = useCallback(() => {\n        setProcess(\"loading\");\n    }, []);\n\n    return { request, clearError, process, setProcess };\n};\n","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const { request, clearError, process, setProcess } = useHttp();\n\n    const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n    const _apiKey = \"apikey=0481e59bf467b69f70671a30361d50b4\";\n    const _baseOffsetChar = 210;\n\n    const getAllCharacters = async (offset = _baseOffsetChar) => {\n        const res = await request(\n            `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\n        );\n        return res.data.results.map(_transformCharacter);\n    };\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?&${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    };\n\n    const getCharacterByName = async (name) => {\n        const res = await request(\n            `${_apiBase}characters?name=${name}&${_apiKey}`\n        );\n        return res.data.results.map(_transformCharacter);\n    };\n\n    const getAllComics = async (offset = 0) => {\n        const res = await request(\n            `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n        );\n        return res.data.results.map(_transformComics);\n    };\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?&${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    };\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description\n                ? `${char.description.slice(0, 210)}...`\n                : `There is no description for this character`,\n            thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items,\n        };\n    };\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || \"There is no description\",\n            pageCount: comics.pageCount\n                ? `${comics.pageCount} p.`\n                : \"No information about the number of pages\",\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n            language: comics.textObjects[0]?.language || \"en-us\",\n            price: comics.prices[0].price\n                ? `${comics.prices[0].price}$`\n                : \"not available\",\n        };\n    };\n\n    return {\n        clearError,\n        process,\n        setProcess,\n        getAllCharacters,\n        getCharacter,\n        getCharacterByName,\n        getAllComics,\n        getComic,\n    };\n};\n\nexport default useMarvelService;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from \"../components/spinner/Spinner\";\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\nimport Skeleton from \"../components/skeleton/Skeleton\";\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n        case \"waiting\":\n            return <Skeleton />;\n\n        case \"loading\":\n            return <Spinner />;\n\n        case \"confirmed\":\n            return <Component data={data} />;\n\n        case \"error\":\n            return <ErrorMessage />;\n\n        default:\n            throw new Error(\"Unexpected process state\");\n    }\n};\n\nexport default setContent;\n"],"names":["animations","initial","opacity","scale","animate","exit","_ref","children","_jsx","motion","div","variants","transition","duration","AppBanner","_jsxs","className","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","Component","dataType","id","useParams","data","setData","useState","getComic","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateData","then","onDataLoaded","AnimationPage","setContent","request","useHttp","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","json","e","_apiBase","_apiKey","_transformCharacter","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getAllCharacters","offset","results","map","res","getCharacterByName","getAllComics","Skeleton","_Fragment","Spinner"],"sourceRoot":""}